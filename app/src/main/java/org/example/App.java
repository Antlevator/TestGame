/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.util.TextureUtil;
import org.lwjgl.*;
import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;
import org.lwjgl.system.*;

import java.nio.*;

import static org.example.util.FastTrig.*;
import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryStack.*;
import static org.lwjgl.system.MemoryUtil.*;

public class App {

    public static final float[] COLOR_YELLOW = new float[]{ 1.0f, 1.0f, 0.0f };

    // The window handle
    private long window;
    private int spritesheetID;

    public void run() {
        System.out.println("Hello LWJGL " + Version.getVersion() + "!");

        init();
        loop();

        // Free the window callbacks and destroy the window
        glfwFreeCallbacks(window);
        glfwDestroyWindow(window);

        // Terminate GLFW and free the error callback
        glfwTerminate();
        glfwSetErrorCallback(null).free();
    }

    private void init() {
        // Setup an error callback. The default implementation
        // will print the error message in System.err.
        GLFWErrorCallback.createPrint(System.err).set();

        // Initialize GLFW. Most GLFW functions will not work before doing this.
        if ( !glfwInit() )
            throw new IllegalStateException("Unable to initialize GLFW");

        // Configure GLFW
        glfwDefaultWindowHints(); // optional, the current window hints are already the default
        GLFW.glfwWindowHint(GLFW_SAMPLES, 4);  // multisampling
        glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); // the window will stay hidden after creation
        glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // the window will be resizable

        // Create the window
        window = glfwCreateWindow(1920/2, 1080/2, "TestGame", NULL, NULL);
        if ( window == NULL )
            throw new RuntimeException("Failed to create the GLFW window");

        // Setup a key callback. It will be called every time a key is pressed, repeated or released.
        glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
            if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE )
                glfwSetWindowShouldClose(window, true); // We will detect this in the rendering loop
        });

        // Get the thread stack and push a new frame
        try ( MemoryStack stack = stackPush() ) {
            IntBuffer pWidth = stack.mallocInt(1); // int*
            IntBuffer pHeight = stack.mallocInt(1); // int*

            // Get the window size passed to glfwCreateWindow
            glfwGetWindowSize(window, pWidth, pHeight);

            // Get the resolution of the primary monitor
            GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());

            // Center the window
            glfwSetWindowPos(
                window,
                (vidmode.width() - pWidth.get(0)) / 2,
                (vidmode.height() - pHeight.get(0)) / 2
            );
        } // the stack frame is popped automatically

        // Make the OpenGL context current
        glfwMakeContextCurrent(window);
        // Enable v-sync
        glfwSwapInterval(1);

        // Make the window visible
        glfwShowWindow(window);

        // Make the window the focused window (bring to front)
        glfwFocusWindow(window);

        // This line is critical for LWJGL's interoperation with GLFW's
        // OpenGL context, or any context that is managed externally.
        // LWJGL detects the context that is current in the current thread,
        // creates the GLCapabilities instance and makes the OpenGL
        // bindings available for use.
        GL.createCapabilities();

        // Set the OpenGL viewport to be fixed size
        GL11.glViewport(0, 0, 512, 512);

        // Set a resize callback to avoid stretching
        GLFW.glfwSetFramebufferSizeCallback(window, (window, width, height) -> {
            // Do nothing here to prevent changing the viewport size
            // The size is fixed to the initial resolution
        });

        // Set the clear color
        glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

        spritesheetID = TextureUtil.loadTexture("/face.png");
    }

    private void loop() {

        // Run the rendering loop until the user has attempted to close
        // the window or has pressed the ESCAPE key.
        while ( !glfwWindowShouldClose(window) ) {
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // clear the framebuffer

            draw();

            glfwSwapBuffers(window); // swap the color buffers

            // Poll for window events. The key callback above will only be
            // invoked during this call.
            glfwPollEvents();
        }
    }

    private void draw() {
//        glColor3fv(COLOR_YELLOW);
//        glBegin(GL_POLYGON);
//        float r = 0.1f;
//        int pts = 12;
//        for(int i = 0; i < pts; i++) {
//            glVertex2f(r * fastSin(TWO_PI * i / pts), r * fastCos(TWO_PI * i / pts));
//        }
//        glEnd();

        // render image
        glBindTexture(GL_TEXTURE_2D, spritesheetID);
        glBegin(GL_QUADS);
        glTexCoord2f(0, 0); glVertex2f(-0.5f, -0.5f);
        glTexCoord2f(1, 0); glVertex2f( 0.5f, -0.5f);
        glTexCoord2f(1, 1); glVertex2f( 0.5f,  0.5f);
        glTexCoord2f(0, 1); glVertex2f(-0.5f,  0.5f);
        glEnd();

    }

    public static void main(String[] args) {
        new App().run();
    }

}